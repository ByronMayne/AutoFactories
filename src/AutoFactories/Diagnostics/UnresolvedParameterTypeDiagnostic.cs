using AutoFactories.Visitors;
using Microsoft.CodeAnalysis;
using Microsoft.CodeAnalysis.CSharp.Syntax;

namespace AutoFactories.Diagnostics
{
    internal class UnresolvedParameterTypeDiagnostic : SyntaxDiagnosticBuilder<ParameterSyntaxVisitor>
    {
        public UnresolvedParameterTypeDiagnostic()
            : base(
                  id: DiagnosticIdentifier.UnresolvedParameterType,
                  title: "Unresolved Parameter Type",
                  category: "Code",
                  messageFormat:
                    $"The parameter '{{0}}' of type '{{1}}' could not be fully resolved by AutoFactories. This typically happens when the type '{{2}}' is generated by another source generator, making it unavailable during the current compilation phase. " +
                    $"To fix this, you can either define a matching partial class for '{{2}}' within the current codebase or avoid using source-generated types as parameters for factories. This ensures the source generator can properly analyze and process the code.")
        {
            Severity = DiagnosticSeverity.Error;
        }

        public override Diagnostic Create(ParameterSyntaxVisitor visitor)
        {
            UnresolvedParameterTypeDiagnostic builder = new UnresolvedParameterTypeDiagnostic();
            return Diagnostic.Create(builder.Descriptor, visitor.AttributeLocation, new object?[] {
                   visitor.Name,
                   visitor.Constructor.Class.Type.Name,
                   visitor.Type.Name
            });
        }

        public static Diagnostic Get(ParameterSyntaxVisitor visitor)
        {
            UnresolvedParameterTypeDiagnostic builder = new UnresolvedParameterTypeDiagnostic();
            return builder.Create(visitor);
        }
    }

}
